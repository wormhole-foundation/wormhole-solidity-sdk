// SPDX-License-Identifier: Apache-2.0
pragma solidity ^0.8.24;

import "wormhole-sdk/libraries/QueryResponse.sol";

// This file was auto-generated by wormhole-solidity-sdk gen/libraryTestWrapper.ts

contract QueryTypeTestWrapper {
  function min() external pure returns (uint8) {
    return QueryType.min();
  }

  function max() external pure returns (uint8) {
    return QueryType.max();
  }

  function checkValid(uint8 queryType) external pure {
    QueryType.checkValid(queryType);
  }

  function isValid(uint8 queryType) external pure returns (bool) {
    return QueryType.isValid(queryType);
  }
}

contract QueryResponseLibTestWrapper {
  function calcPrefixedResponseHashCd(bytes calldata response) external pure returns (bytes32) {
    return QueryResponseLib.calcPrefixedResponseHashCd(response);
  }

  function calcPrefixedResponseHashMem(bytes calldata response) external pure returns (bytes32) {
    return QueryResponseLib.calcPrefixedResponseHashMem(response);
  }

  function calcPrefixedResponseHash(bytes32 responseHash) external pure returns (bytes32) {
    return QueryResponseLib.calcPrefixedResponseHash(responseHash);
  }

  function decodeAndVerifyQueryResponseCd(
    address wormhole,
    bytes calldata response,
    GuardianSignature[] calldata guardianSignatures,
    uint32 guardianSetIndex
  ) external view returns (QueryResponse memory ret) {
    return QueryResponseLib.decodeAndVerifyQueryResponseCd(wormhole, response, guardianSignatures, guardianSetIndex);
  }

  function decodeAndVerifyQueryResponseMem(
    address wormhole,
    bytes calldata response,
    GuardianSignature[] calldata guardianSignatures,
    uint32 guardianSetIndex
  ) external view returns (QueryResponse memory ret) {
    return QueryResponseLib.decodeAndVerifyQueryResponseMem(wormhole, response, guardianSignatures, guardianSetIndex);
  }

  function verifyQueryResponseCd(
    address wormhole,
    bytes calldata response,
    GuardianSignature[] calldata guardianSignatures,
    uint32 guardianSetIndex
  ) external view {
    QueryResponseLib.verifyQueryResponseCd(wormhole, response, guardianSignatures, guardianSetIndex);
  }

  function verifyQueryResponseMem(
    address wormhole,
    bytes calldata response,
    GuardianSignature[] calldata guardianSignatures,
    uint32 guardianSetIndex
  ) external view {
    QueryResponseLib.verifyQueryResponseMem(wormhole, response, guardianSignatures, guardianSetIndex);
  }

  function decodeAndVerifyQueryResponseCd(
    bytes calldata response,
    GuardianSignature[] calldata guardianSignatures,
    address[] calldata guardians
  ) external pure returns (QueryResponse memory ret) {
    return QueryResponseLib.decodeAndVerifyQueryResponseCd(response, guardianSignatures, guardians);
  }

  function decodeAndVerifyQueryResponseMem(
    bytes calldata response,
    GuardianSignature[] calldata guardianSignatures,
    address[] calldata guardians
  ) external pure returns (QueryResponse memory ret) {
    return QueryResponseLib.decodeAndVerifyQueryResponseMem(response, guardianSignatures, guardians);
  }

  function verifyQueryResponseCd(
    bytes calldata response,
    GuardianSignature[] calldata guardianSignatures,
    address[] calldata guardians
  ) external pure {
    QueryResponseLib.verifyQueryResponseCd(response, guardianSignatures, guardians);
  }

  function verifyQueryResponseMem(
    bytes calldata response,
    GuardianSignature[] calldata guardianSignatures,
    address[] calldata guardians
  ) external pure {
    QueryResponseLib.verifyQueryResponseMem(response, guardianSignatures, guardians);
  }

  function decodeQueryResponseCd(bytes calldata response) external pure returns (QueryResponse memory ret) {
    return QueryResponseLib.decodeQueryResponseCd(response);
  }

  function decodeQueryResponseMem(bytes calldata response) external pure returns (QueryResponse memory ret) {
    return QueryResponseLib.decodeQueryResponseMem(response);
  }

  function decodeEthCallQueryResponse(PerChainQueryResponse calldata pcr) external pure returns (EthCallQueryResponse memory ret) {
    return QueryResponseLib.decodeEthCallQueryResponse(pcr);
  }

  function decodeEthCallByTimestampQueryResponse(PerChainQueryResponse calldata pcr) external pure returns (EthCallByTimestampQueryResponse memory ret) {
    return QueryResponseLib.decodeEthCallByTimestampQueryResponse(pcr);
  }

  function decodeEthCallWithFinalityQueryResponse(PerChainQueryResponse calldata pcr) external pure returns (EthCallWithFinalityQueryResponse memory ret) {
    return QueryResponseLib.decodeEthCallWithFinalityQueryResponse(pcr);
  }

  function decodeSolanaAccountQueryResponse(PerChainQueryResponse calldata pcr) external pure returns (SolanaAccountQueryResponse memory ret) {
    return QueryResponseLib.decodeSolanaAccountQueryResponse(pcr);
  }

  function decodeSolanaPdaQueryResponse(PerChainQueryResponse calldata pcr) external pure returns (SolanaPdaQueryResponse memory ret) {
    return QueryResponseLib.decodeSolanaPdaQueryResponse(pcr);
  }

  function validateBlockTime(uint64 blockTimeInMicroSeconds, uint256 minBlockTimeInSeconds) external pure {
    QueryResponseLib.validateBlockTime(blockTimeInMicroSeconds, minBlockTimeInSeconds);
  }

  function validateBlockNum(uint64 blockNum, uint256 minBlockNum) external pure {
    QueryResponseLib.validateBlockNum(blockNum, minBlockNum);
  }

  function validateChainId(uint16 chainId, uint16[] calldata validChainIds) external pure {
    QueryResponseLib.validateChainId(chainId, validChainIds);
  }

  function validateEthCallRecord(
    EthCallRecord[] calldata ecrs,
    address[] calldata validContractAddresses,
    bytes4[] calldata validFunctionSignatures
  ) external pure {
    QueryResponseLib.validateEthCallRecord(ecrs, validContractAddresses, validFunctionSignatures);
  }

  function validateEthCallRecord(
    EthCallRecord calldata ecd,
    address[] calldata validContractAddresses,
    bytes4[] calldata validFunctionSignatures
  ) external pure {
    QueryResponseLib.validateEthCallRecord(ecd, validContractAddresses, validFunctionSignatures);
  }
}

// SPDX-License-Identifier: Apache 2
pragma solidity ^0.8.24;

import "wormhole-sdk/libraries/VaaLib.sol";

// This file was auto-generated by wormhole-solidity-sdk gen/libraryTestWrapper.ts

contract VaaLibTestWrapper {
  function decodeVaaStructCd(bytes calldata encodedVaa) external pure returns (Vaa memory vaa) {
    return VaaLib.decodeVaaStructCd(encodedVaa);
  }

  function decodeVaaStructMem(bytes calldata encodedVaa) external pure returns (Vaa memory vaa) {
    return VaaLib.decodeVaaStructMem(encodedVaa);
  }

  function decodeVaaEssentialsCd(bytes calldata encodedVaa) external pure returns (
    uint16 emitterChainId,
    bytes32 emitterAddress,
    uint64 sequence,
    bytes calldata payload
  ) {
    return VaaLib.decodeVaaEssentialsCd(encodedVaa);
  }

  function decodeVaaEssentialsStructCd(bytes calldata encodedVaa) external pure returns (VaaEssentials memory ret) {
    return VaaLib.decodeVaaEssentialsStructCd(encodedVaa);
  }

  function decodeVaaEssentialsMem(bytes calldata encodedVaa) external pure returns (
    uint16 emitterChainId,
    bytes32 emitterAddress,
    uint64 sequence,
    bytes memory payload
  ) {
    return VaaLib.decodeVaaEssentialsMem(encodedVaa);
  }

  function decodeVaaEssentialsStructMem(bytes calldata encodedVaa) external pure returns (VaaEssentials memory ret) {
    return VaaLib.decodeVaaEssentialsStructMem(encodedVaa);
  }

  function decodeVaaBodyCd(bytes calldata encodedVaa) external pure returns (
    uint32 timestamp,
    uint32 nonce,
    uint16 emitterChainId,
    bytes32 emitterAddress,
    uint64 sequence,
    uint8 consistencyLevel,
    bytes calldata payload
  ) {
    return VaaLib.decodeVaaBodyCd(encodedVaa);
  }

  function decodeVaaBodyStructCd(bytes calldata encodedVaa) external pure returns (VaaBody memory body) {
    return VaaLib.decodeVaaBodyStructCd(encodedVaa);
  }

  function decodeVaaBodyMem(bytes calldata encodedVaa) external pure returns (
    uint32 timestamp,
    uint32 nonce,
    uint16 emitterChainId,
    bytes32 emitterAddress,
    uint64 sequence,
    uint8 consistencyLevel,
    bytes memory payload
  ) {
    return VaaLib.decodeVaaBodyMem(encodedVaa);
  }

  function decodeVaaBodyStructMem(bytes calldata encodedVaa) external pure returns (VaaBody memory body) {
    return VaaLib.decodeVaaBodyStructMem(encodedVaa);
  }

  function decodeVmStructCd(bytes calldata encodedVaa) external pure returns (CoreBridgeVM memory vm) {
    return VaaLib.decodeVmStructCd(encodedVaa);
  }

  function decodeVmStructMem(bytes calldata encodedVaa) external pure returns (CoreBridgeVM memory vm) {
    return VaaLib.decodeVmStructMem(encodedVaa);
  }

  function decodeEmitterChainAndPayloadCdUnchecked(bytes calldata encodedVaa) external pure returns (uint16 emitterChainId, bytes calldata payload) {
    return VaaLib.decodeEmitterChainAndPayloadCdUnchecked(encodedVaa);
  }

  function decodeEmitterChainAndPayloadMemUnchecked(bytes calldata encodedVaa) external pure returns (uint16 emitterChainId, bytes memory payload) {
    return VaaLib.decodeEmitterChainAndPayloadMemUnchecked(encodedVaa);
  }

  function decodeVaaAttestationMultiSigCd(bytes calldata encodedAttestation) external pure returns (uint32 guardianSetIndex, GuardianSignature[] memory signatures) {
    return VaaLib.decodeVaaAttestationMultiSigCd(encodedAttestation);
  }

  function decodeVaaAttestationMultiSigMem(bytes calldata encodedAttestation) external pure returns (uint32 guardianSetIndex, GuardianSignature[] memory signatures) {
    return VaaLib.decodeVaaAttestationMultiSigMem(encodedAttestation);
  }

  function decodeVaaAttestationMultiSigStructCd(bytes calldata encodedAttestation) external pure returns (VaaAttestationMultiSig memory attestation) {
    return VaaLib.decodeVaaAttestationMultiSigStructCd(encodedAttestation);
  }

  function decodeVaaAttestationMultiSigStructMem(bytes calldata encodedAttestation) external pure returns (VaaAttestationMultiSig memory attestation) {
    return VaaLib.decodeVaaAttestationMultiSigStructMem(encodedAttestation);
  }

  function decodeVaaAttestationSchnorrCd(bytes calldata encodedAttestation) external pure returns (
    uint32 schnorrKeyIndex,
    bytes20 r,
    bytes32 s
  ) {
    return VaaLib.decodeVaaAttestationSchnorrCd(encodedAttestation);
  }

  function decodeVaaAttestationSchnorrMem(bytes calldata encodedAttestation) external pure returns (
    uint32 schnorrKeyIndex,
    bytes20 r,
    bytes32 s
  ) {
    return VaaLib.decodeVaaAttestationSchnorrMem(encodedAttestation);
  }

  function decodeVaaAttestationSchnorrStructCd(bytes calldata encodedAttestation) external pure returns (VaaAttestationSchnorr memory attestation) {
    return VaaLib.decodeVaaAttestationSchnorrStructCd(encodedAttestation);
  }

  function decodeVaaAttestationSchnorrStructMem(bytes calldata encodedAttestation) external pure returns (VaaAttestationSchnorr memory attestation) {
    return VaaLib.decodeVaaAttestationSchnorrStructMem(encodedAttestation);
  }

  function decodeVaaAttestationEcdsaCd(bytes calldata encodedAttestation) external pure returns (
    uint32 ecdsaKeyIndex,
    bytes32 r,
    bytes32 s,
    uint8 v
  ) {
    return VaaLib.decodeVaaAttestationEcdsaCd(encodedAttestation);
  }

  function decodeVaaAttestationEcdsaMem(bytes calldata encodedAttestation) external pure returns (
    uint32 ecdsaKeyIndex,
    bytes32 r,
    bytes32 s,
    uint8 v
  ) {
    return VaaLib.decodeVaaAttestationEcdsaMem(encodedAttestation);
  }

  function decodeVaaAttestationEcdsaStructCd(bytes calldata encodedAttestation) external pure returns (VaaAttestationEcdsa memory attestation) {
    return VaaLib.decodeVaaAttestationEcdsaStructCd(encodedAttestation);
  }

  function decodeVaaAttestationEcdsaStructMem(bytes calldata encodedAttestation) external pure returns (VaaAttestationEcdsa memory attestation) {
    return VaaLib.decodeVaaAttestationEcdsaStructMem(encodedAttestation);
  }

  function decodeVaaMultiSigStructCd(bytes calldata encodedVaa) external pure returns (VaaMultiSig memory vaa) {
    return VaaLib.decodeVaaMultiSigStructCd(encodedVaa);
  }

  function decodeVaaMultiSigStructMem(bytes calldata encodedVaa) external pure returns (VaaMultiSig memory vaa) {
    return VaaLib.decodeVaaMultiSigStructMem(encodedVaa);
  }

  function decodeVaaSchnorrStructCd(bytes calldata encodedVaa) external pure returns (VaaSchnorr memory vaa) {
    return VaaLib.decodeVaaSchnorrStructCd(encodedVaa);
  }

  function decodeVaaSchnorrStructMem(bytes calldata encodedVaa) external pure returns (VaaSchnorr memory vaa) {
    return VaaLib.decodeVaaSchnorrStructMem(encodedVaa);
  }

  function decodeVaaEcdsaStructCd(bytes calldata encodedVaa) external pure returns (VaaEcdsa memory vaa) {
    return VaaLib.decodeVaaEcdsaStructCd(encodedVaa);
  }

  function decodeVaaEcdsaStructMem(bytes calldata encodedVaa) external pure returns (VaaEcdsa memory vaa) {
    return VaaLib.decodeVaaEcdsaStructMem(encodedVaa);
  }

  function decodeVaaVersionCdUnchecked(bytes calldata encodedVaa) external pure returns (uint8 version, uint attestationOffset) {
    return VaaLib.decodeVaaVersionCdUnchecked(encodedVaa);
  }

  function decodeVaaVersionMemUnchecked(bytes calldata encoded, uint headerOffset) external pure returns (uint8 version, uint attestationOffset) {
    return VaaLib.decodeVaaVersionMemUnchecked(encoded, headerOffset);
  }

  function checkVaaVersion(uint8 version, uint8 expected) external pure {
    VaaLib.checkVaaVersion(version, expected);
  }

  function checkVaaVersionCdUnchecked(uint8 expectedVersion, bytes calldata encodedVaa) external pure returns (uint attestationOffset) {
    return VaaLib.checkVaaVersionCdUnchecked(expectedVersion, encodedVaa);
  }

  function checkVaaVersionMemUnchecked(
    uint8 expectedVersion,
    bytes calldata encoded,
    uint offset
  ) external pure returns (uint attestationOffset) {
    return VaaLib.checkVaaVersionMemUnchecked(expectedVersion, encoded, offset);
  }

  function decodeVaaHeaderCdUnchecked(bytes calldata encodedVaa) external pure returns (
    uint8 version,
    bytes calldata attestation,
    uint envelopeOffset
  ) {
    return VaaLib.decodeVaaHeaderCdUnchecked(encodedVaa);
  }

  function decodeVaaHeaderStructCdUnchecked(bytes calldata encodedVaa) external pure returns (VaaHeader memory header, uint envelopeOffset) {
    return VaaLib.decodeVaaHeaderStructCdUnchecked(encodedVaa);
  }

  function decodeVaaHeaderMemUnchecked(bytes calldata encoded, uint headerOffset) external pure returns (
    uint8 version,
    bytes memory attestation,
    uint envelopeOffset
  ) {
    return VaaLib.decodeVaaHeaderMemUnchecked(encoded, headerOffset);
  }

  function decodeVaaHeaderStructMemUnchecked(bytes calldata encoded, uint headerOffset) external pure returns (VaaHeader memory header, uint envelopeOffset) {
    return VaaLib.decodeVaaHeaderStructMemUnchecked(encoded, headerOffset);
  }

  function skipVaaHeaderCdUnchecked(bytes calldata encodedVaa) external pure returns (uint envelopeOffset) {
    return VaaLib.skipVaaHeaderCdUnchecked(encodedVaa);
  }

  function skipVaaHeaderMemUnchecked(bytes calldata encoded, uint headerOffset) external pure returns (uint envelopeOffset) {
    return VaaLib.skipVaaHeaderMemUnchecked(encoded, headerOffset);
  }

  function calcVaaSingleHashCd(bytes calldata encodedVaa, uint envelopeOffset) external pure returns (bytes32) {
    return VaaLib.calcVaaSingleHashCd(encodedVaa, envelopeOffset);
  }

  function calcVaaSingleHashMem(
    bytes calldata encoded,
    uint envelopeOffset,
    uint vaaLength
  ) external pure returns (bytes32) {
    return VaaLib.calcVaaSingleHashMem(encoded, envelopeOffset, vaaLength);
  }

  function calcSingleHash(Vaa calldata vaa) external pure returns (bytes32) {
    return VaaLib.calcSingleHash(vaa);
  }

  function calcSingleHash(VaaMultiSig calldata vaa) external pure returns (bytes32) {
    return VaaLib.calcSingleHash(vaa);
  }

  function calcSingleHash(VaaSchnorr calldata vaa) external pure returns (bytes32) {
    return VaaLib.calcSingleHash(vaa);
  }

  function calcSingleHash(VaaEcdsa calldata vaa) external pure returns (bytes32) {
    return VaaLib.calcSingleHash(vaa);
  }

  function calcSingleHash(VaaBody calldata body) external pure returns (bytes32) {
    return VaaLib.calcSingleHash(body);
  }

  function calcVaaDoubleHashCd(bytes calldata encodedVaa, uint envelopeOffset) external pure returns (bytes32) {
    return VaaLib.calcVaaDoubleHashCd(encodedVaa, envelopeOffset);
  }

  function calcVaaDoubleHashMem(
    bytes calldata encoded,
    uint envelopeOffset,
    uint vaaLength
  ) external pure returns (bytes32) {
    return VaaLib.calcVaaDoubleHashMem(encoded, envelopeOffset, vaaLength);
  }

  function calcDoubleHash(Vaa calldata vaa) external pure returns (bytes32) {
    return VaaLib.calcDoubleHash(vaa);
  }

  function calcDoubleHash(VaaMultiSig calldata vaa) external pure returns (bytes32) {
    return VaaLib.calcDoubleHash(vaa);
  }

  function calcDoubleHash(VaaSchnorr calldata vaa) external pure returns (bytes32) {
    return VaaLib.calcDoubleHash(vaa);
  }

  function calcDoubleHash(VaaEcdsa calldata vaa) external pure returns (bytes32) {
    return VaaLib.calcDoubleHash(vaa);
  }

  function calcDoubleHash(VaaBody calldata body) external pure returns (bytes32) {
    return VaaLib.calcDoubleHash(body);
  }

  function decodeVaaEssentialsMem(
    bytes calldata encoded,
    uint headerOffset,
    uint vaaLength
  ) external pure returns (
    uint16 emitterChainId,
    bytes32 emitterAddress,
    uint64 sequence,
    bytes memory payload,
    uint newOffset
  ) {
    return VaaLib.decodeVaaEssentialsMem(encoded, headerOffset, vaaLength);
  }

  function decodeVaaEssentialsStructMem(
    bytes calldata encodedVaa,
    uint headerOffset,
    uint vaaLength
  ) external pure returns (VaaEssentials memory ret, uint newOffset) {
    return VaaLib.decodeVaaEssentialsStructMem(encodedVaa, headerOffset, vaaLength);
  }

  function decodeVaaStructMemUnchecked(
    bytes calldata encoded,
    uint headerOffset,
    uint vaaLength
  ) external pure returns (Vaa memory vaa, uint newOffset) {
    return VaaLib.decodeVaaStructMemUnchecked(encoded, headerOffset, vaaLength);
  }

  function decodeVaaBodyCd(bytes calldata encodedVaa, uint envelopeOffset) external pure returns (
    uint32 timestamp,
    uint32 nonce,
    uint16 emitterChainId,
    bytes32 emitterAddress,
    uint64 sequence,
    uint8 consistencyLevel,
    bytes calldata payload
  ) {
    return VaaLib.decodeVaaBodyCd(encodedVaa, envelopeOffset);
  }

  function decodeVaaBodyStructCd(bytes calldata encodedVaa, uint envelopeOffset) external pure returns (VaaBody memory body) {
    return VaaLib.decodeVaaBodyStructCd(encodedVaa, envelopeOffset);
  }

  function decodeVaaBodyMemUnchecked(
    bytes calldata encoded,
    uint envelopeOffset,
    uint vaaLength
  ) external pure returns (
    uint32 timestamp,
    uint32 nonce,
    uint16 emitterChainId,
    bytes32 emitterAddress,
    uint64 sequence,
    uint8 consistencyLevel,
    bytes memory payload,
    uint newOffset
  ) {
    return VaaLib.decodeVaaBodyMemUnchecked(encoded, envelopeOffset, vaaLength);
  }

  function decodeVaaBodyStructMemUnchecked(
    bytes calldata encoded,
    uint envelopeOffset,
    uint vaaLength
  ) external pure returns (VaaBody memory body, uint newOffset) {
    return VaaLib.decodeVaaBodyStructMemUnchecked(encoded, envelopeOffset, vaaLength);
  }

  function decodeVaaEnvelopeCdUnchecked(bytes calldata encodedVaa, uint envelopeOffset) external pure returns (
    uint32 timestamp,
    uint32 nonce,
    uint16 emitterChainId,
    bytes32 emitterAddress,
    uint64 sequence,
    uint8 consistencyLevel,
    uint payloadOffset
  ) {
    return VaaLib.decodeVaaEnvelopeCdUnchecked(encodedVaa, envelopeOffset);
  }

  function decodeVaaEnvelopeStructCdUnchecked(bytes calldata encodedVaa, uint envelopeOffset) external pure returns (VaaEnvelope memory envelope, uint payloadOffset) {
    return VaaLib.decodeVaaEnvelopeStructCdUnchecked(encodedVaa, envelopeOffset);
  }

  function decodeVaaEnvelopeMemUnchecked(bytes calldata encoded, uint envelopeOffset) external pure returns (
    uint32 timestamp,
    uint32 nonce,
    uint16 emitterChainId,
    bytes32 emitterAddress,
    uint64 sequence,
    uint8 consistencyLevel,
    uint payloadOffset
  ) {
    return VaaLib.decodeVaaEnvelopeMemUnchecked(encoded, envelopeOffset);
  }

  function decodeVaaEnvelopeStructMemUnchecked(bytes calldata encoded, uint envelopeOffset) external pure returns (VaaEnvelope memory envelope, uint payloadOffset) {
    return VaaLib.decodeVaaEnvelopeStructMemUnchecked(encoded, envelopeOffset);
  }

  function decodeVmStructMemUnchecked(
    bytes calldata encoded,
    uint headerOffset,
    uint vaaLength
  ) external pure returns (CoreBridgeVM memory vm, uint newOffset) {
    return VaaLib.decodeVmStructMemUnchecked(encoded, headerOffset, vaaLength);
  }

  function decodeVaaMultiSigStructMemUnchecked(
    bytes calldata encoded,
    uint headerOffset,
    uint vaaLength
  ) external pure returns (VaaMultiSig memory vaa, uint newOffset) {
    return VaaLib.decodeVaaMultiSigStructMemUnchecked(encoded, headerOffset, vaaLength);
  }

  function decodeVaaSchnorrStructMemUnchecked(
    bytes calldata encoded,
    uint headerOffset,
    uint vaaLength
  ) external pure returns (VaaSchnorr memory vaa, uint newOffset) {
    return VaaLib.decodeVaaSchnorrStructMemUnchecked(encoded, headerOffset, vaaLength);
  }

  function decodeVaaEcdsaStructMemUnchecked(
    bytes calldata encoded,
    uint headerOffset,
    uint vaaLength
  ) external pure returns (VaaEcdsa memory vaa, uint newOffset) {
    return VaaLib.decodeVaaEcdsaStructMemUnchecked(encoded, headerOffset, vaaLength);
  }

  function decodeVaaAttestationMultiSigCdUnchecked(bytes calldata encodedVaa, uint attestationOffset) external pure returns (
    uint32 guardianSetIndex,
    GuardianSignature[] memory signatures,
    uint envelopeOffset
  ) {
    return VaaLib.decodeVaaAttestationMultiSigCdUnchecked(encodedVaa, attestationOffset);
  }

  function decodeVaaAttestationMultiSigStructCdUnchecked(bytes calldata encodedVaa, uint attestationOffset) external pure returns (VaaAttestationMultiSig memory header, uint envelopeOffset) {
    return VaaLib.decodeVaaAttestationMultiSigStructCdUnchecked(encodedVaa, attestationOffset);
  }

  function decodeVaaAttestationMultiSigMemUnchecked(bytes calldata encoded, uint attestationOffset) external pure returns (
    uint32 guardianSetIndex,
    GuardianSignature[] memory signatures,
    uint envelopeOffset
  ) {
    return VaaLib.decodeVaaAttestationMultiSigMemUnchecked(encoded, attestationOffset);
  }

  function decodeVaaAttestationMultiSigStructMemUnchecked(bytes calldata encoded, uint attestationOffset) external pure returns (VaaAttestationMultiSig memory header, uint envelopeOffset) {
    return VaaLib.decodeVaaAttestationMultiSigStructMemUnchecked(encoded, attestationOffset);
  }

  function decodeGuardianSignatureCdUnchecked(bytes calldata encodedVaa, uint offset) external pure returns (
    uint8 guardianIndex,
    bytes32 r,
    bytes32 s,
    uint8 v,
    uint newOffset
  ) {
    return VaaLib.decodeGuardianSignatureCdUnchecked(encodedVaa, offset);
  }

  function decodeGuardianSignatureStructCdUnchecked(bytes calldata encodedVaa, uint attestationOffset) external pure returns (GuardianSignature memory ret, uint envelopeOffset) {
    return VaaLib.decodeGuardianSignatureStructCdUnchecked(encodedVaa, attestationOffset);
  }

  function decodeGuardianSignatureMemUnchecked(bytes calldata encoded, uint attestationOffset) external pure returns (
    uint8 guardianIndex,
    bytes32 r,
    bytes32 s,
    uint8 v,
    uint envelopeOffset
  ) {
    return VaaLib.decodeGuardianSignatureMemUnchecked(encoded, attestationOffset);
  }

  function decodeGuardianSignatureStructMemUnchecked(bytes calldata encoded, uint offset) external pure returns (GuardianSignature memory ret, uint newOffset) {
    return VaaLib.decodeGuardianSignatureStructMemUnchecked(encoded, offset);
  }

  function decodeVaaAttestationSchnorrCdUnchecked(bytes calldata encodedVaa, uint attestationOffset) external pure returns (
    uint32 schnorrKeyIndex,
    bytes20 r,
    bytes32 s,
    uint newOffset
  ) {
    return VaaLib.decodeVaaAttestationSchnorrCdUnchecked(encodedVaa, attestationOffset);
  }

  function decodeVaaAttestationSchnorrStructCdUnchecked(bytes calldata encodedVaa, uint attestationOffset) external pure returns (VaaAttestationSchnorr memory header, uint envelopeOffset) {
    return VaaLib.decodeVaaAttestationSchnorrStructCdUnchecked(encodedVaa, attestationOffset);
  }

  function decodeVaaAttestationSchnorrMemUnchecked(bytes calldata encoded, uint attestationOffset) external pure returns (
    uint32 schnorrKeyIndex,
    bytes20 r,
    bytes32 s,
    uint envelopeOffset
  ) {
    return VaaLib.decodeVaaAttestationSchnorrMemUnchecked(encoded, attestationOffset);
  }

  function decodeVaaAttestationSchnorrStructMemUnchecked(bytes calldata encoded, uint attestationOffset) external pure returns (VaaAttestationSchnorr memory header, uint envelopeOffset) {
    return VaaLib.decodeVaaAttestationSchnorrStructMemUnchecked(encoded, attestationOffset);
  }

  function decodeVaaAttestationEcdsaCdUnchecked(bytes calldata encodedVaa, uint attestationOffset) external pure returns (
    uint32 ecdsaKeyIndex,
    bytes32 r,
    bytes32 s,
    uint8 v,
    uint newOffset
  ) {
    return VaaLib.decodeVaaAttestationEcdsaCdUnchecked(encodedVaa, attestationOffset);
  }

  function decodeVaaAttestationEcdsaStructCdUnchecked(bytes calldata encodedVaa, uint attestationOffset) external pure returns (VaaAttestationEcdsa memory header, uint envelopeOffset) {
    return VaaLib.decodeVaaAttestationEcdsaStructCdUnchecked(encodedVaa, attestationOffset);
  }

  function decodeVaaAttestationEcdsaMemUnchecked(bytes calldata encoded, uint attestationOffset) external pure returns (
    uint32 ecdsaKeyIndex,
    bytes32 r,
    bytes32 s,
    uint8 v,
    uint newOffset
  ) {
    return VaaLib.decodeVaaAttestationEcdsaMemUnchecked(encoded, attestationOffset);
  }

  function decodeVaaAttestationEcdsaStructMemUnchecked(bytes calldata encoded, uint attestationOffset) external pure returns (VaaAttestationEcdsa memory header, uint envelopeOffset) {
    return VaaLib.decodeVaaAttestationEcdsaStructMemUnchecked(encoded, attestationOffset);
  }

  function decodeVaaPayloadCd(bytes calldata encodedVaa, uint payloadOffset) external pure returns (bytes calldata payload) {
    return VaaLib.decodeVaaPayloadCd(encodedVaa, payloadOffset);
  }

  function decodeVaaPayloadMemUnchecked(
    bytes calldata encoded,
    uint payloadOffset,
    uint vaaLength
  ) external pure returns (bytes memory payload, uint newOffset) {
    return VaaLib.decodeVaaPayloadMemUnchecked(encoded, payloadOffset, vaaLength);
  }

  function encodeVaaHeader(uint8 version, bytes calldata attestation) external pure returns (bytes memory) {
    return VaaLib.encodeVaaHeader(version, attestation);
  }

  function encode(VaaHeader calldata val) external pure returns (bytes memory) {
    return VaaLib.encode(val);
  }

  function encodeVaaAttestationMultiSig(uint32 guardianSetIndex, GuardianSignature[] calldata signatures) external pure returns (bytes memory) {
    return VaaLib.encodeVaaAttestationMultiSig(guardianSetIndex, signatures);
  }

  function encode(VaaAttestationMultiSig calldata val) external pure returns (bytes memory) {
    return VaaLib.encode(val);
  }

  function encodeVaaAttestationSchnorr(
    uint32 schnorrKeyIndex,
    bytes20 r,
    bytes32 s
  ) external pure returns (bytes memory) {
    return VaaLib.encodeVaaAttestationSchnorr(schnorrKeyIndex, r, s);
  }

  function encode(VaaAttestationSchnorr calldata val) external pure returns (bytes memory) {
    return VaaLib.encode(val);
  }

  function encodeVaaAttestationEcdsa(
    uint32 ecdsaKeyIndex,
    bytes32 r,
    bytes32 s,
    uint8 v
  ) external pure returns (bytes memory) {
    return VaaLib.encodeVaaAttestationEcdsa(ecdsaKeyIndex, r, s, v);
  }

  function encode(VaaAttestationEcdsa calldata val) external pure returns (bytes memory) {
    return VaaLib.encode(val);
  }

  function encodeVaaEnvelope(
    uint32 timestamp,
    uint32 nonce,
    uint16 emitterChainId,
    bytes32 emitterAddress,
    uint64 sequence,
    uint8 consistencyLevel
  ) external pure returns (bytes memory) {
    return VaaLib.encodeVaaEnvelope(timestamp, nonce, emitterChainId, emitterAddress, sequence, consistencyLevel);
  }

  function encode(VaaEnvelope calldata val) external pure returns (bytes memory) {
    return VaaLib.encode(val);
  }

  function encodeVaaBody(
    uint32 timestamp,
    uint32 nonce,
    uint16 emitterChainId,
    bytes32 emitterAddress,
    uint64 sequence,
    uint8 consistencyLevel,
    bytes calldata payload
  ) external pure returns (bytes memory) {
    return VaaLib.encodeVaaBody(timestamp, nonce, emitterChainId, emitterAddress, sequence, consistencyLevel, payload);
  }

  function encode(VaaBody calldata body) external pure returns (bytes memory) {
    return VaaLib.encode(body);
  }

  function encode(Vaa calldata vaa) external pure returns (bytes memory) {
    return VaaLib.encode(vaa);
  }

  function encode(VaaMultiSig calldata vaa) external pure returns (bytes memory) {
    return VaaLib.encode(vaa);
  }

  function encode(VaaSchnorr calldata vaa) external pure returns (bytes memory) {
    return VaaLib.encode(vaa);
  }

  function encode(VaaEcdsa calldata vaa) external pure returns (bytes memory) {
    return VaaLib.encode(vaa);
  }

  function encode(CoreBridgeVM calldata vm) external pure returns (bytes memory) {
    return VaaLib.encode(vm);
  }
}

// SPDX-License-Identifier: Apache 2
pragma solidity ^0.8.0;

// ╭──────────────────────────────────────╮
// │ Auto-generated by gen/chainConsts.ts │
// ╰──────────────────────────────────────╯

// This file contains 2 libraries and an associated set of free standing functions:
//
// The libraries:
//  1. MainnetChainConstants
//  2. TestnetChainConstants
//
// Both provide the same set of functions, which are also provided as free standing functions
//   with an additional network parameter, though library functions use an underscore prefix to
//   avoid a declaration shadowing bug that has been first reported in the solc Github in 2020...
//   see https://github.com/ethereum/solidity/issues/10155
//
//          Function        │ Parameter │  Returns
//  ────────────────────────┼───────────┼────────────
//   chainName              │  chainId  │  string
//   defaultRPC             │  chainId  │  string
//   coreBridge             │  chainId  │  address
//   tokenBridge            │  chainId  │  address
//   wormholeRelayer        │  chainId  │  address
//   cctpDomain             │  chainId  │ cctpDomain
//   usdc                   │  chainId  │  address
//   cctpMessageTransmitter │  chainId  │  address
//   cctpTokenMessenger     │  chainId  │  address
//
// Empty fields return invalid values (empty string, address(0), INVALID_CCTP_DOMAIN)

import "wormhole-sdk/constants/Chains.sol";
import "wormhole-sdk/constants/CctpDomains.sol";

uint32 constant INVALID_CCTP_DOMAIN = type(uint32).max;
error UnsupportedChainId(uint16 chainId);
error UnsupportedCctpDomain(uint32 cctpDomain);

function chainName(bool mainnet, uint16 chainId) pure returns (string memory) {
  return mainnet
    ? MainnetChainConstants._chainName(chainId)
    : TestnetChainConstants._chainName(chainId);
}

function defaultRPC(bool mainnet, uint16 chainId) pure returns (string memory) {
  return mainnet
    ? MainnetChainConstants._defaultRPC(chainId)
    : TestnetChainConstants._defaultRPC(chainId);
}

function coreBridge(bool mainnet, uint16 chainId) pure returns (address) {
  return mainnet
    ? MainnetChainConstants._coreBridge(chainId)
    : TestnetChainConstants._coreBridge(chainId);
}

function tokenBridge(bool mainnet, uint16 chainId) pure returns (address) {
  return mainnet
    ? MainnetChainConstants._tokenBridge(chainId)
    : TestnetChainConstants._tokenBridge(chainId);
}

function wormholeRelayer(bool mainnet, uint16 chainId) pure returns (address) {
  return mainnet
    ? MainnetChainConstants._wormholeRelayer(chainId)
    : TestnetChainConstants._wormholeRelayer(chainId);
}

function cctpDomain(bool mainnet, uint16 chainId) pure returns (uint32) {
  return mainnet
    ? MainnetChainConstants._cctpDomain(chainId)
    : TestnetChainConstants._cctpDomain(chainId);
}

function usdc(bool mainnet, uint16 chainId) pure returns (address) {
  return mainnet
    ? MainnetChainConstants._usdc(chainId)
    : TestnetChainConstants._usdc(chainId);
}

function cctpMessageTransmitter(bool mainnet, uint16 chainId) pure returns (address) {
  return mainnet
    ? MainnetChainConstants._cctpMessageTransmitter(chainId)
    : TestnetChainConstants._cctpMessageTransmitter(chainId);
}

function cctpTokenMessenger(bool mainnet, uint16 chainId) pure returns (address) {
  return mainnet
    ? MainnetChainConstants._cctpTokenMessenger(chainId)
    : TestnetChainConstants._cctpTokenMessenger(chainId);
}

library MainnetChainConstants {
  function _chainName(uint16 chainId) internal pure returns (string memory) {
    if (chainId == CHAIN_ID_ACALA)
      return "Acala";
    if (chainId == CHAIN_ID_ARBITRUM)
      return "Arbitrum";
    if (chainId == CHAIN_ID_AURORA)
      return "Aurora";
    if (chainId == CHAIN_ID_AVALANCHE)
      return "Avalanche";
    if (chainId == CHAIN_ID_BASE)
      return "Base";
    if (chainId == CHAIN_ID_BSC)
      return "Bsc";
    if (chainId == CHAIN_ID_CELO)
      return "Celo";
    if (chainId == CHAIN_ID_ETHEREUM)
      return "Ethereum";
    if (chainId == CHAIN_ID_FANTOM)
      return "Fantom";
    if (chainId == CHAIN_ID_GNOSIS)
      return "Gnosis";
    if (chainId == CHAIN_ID_KARURA)
      return "Karura";
    if (chainId == CHAIN_ID_KLAYTN)
      return "Klaytn";
    if (chainId == CHAIN_ID_MOONBEAM)
      return "Moonbeam";
    if (chainId == CHAIN_ID_OASIS)
      return "Oasis";
    if (chainId == CHAIN_ID_OPTIMISM)
      return "Optimism";
    if (chainId == CHAIN_ID_POLYGON)
      return "Polygon";
    if (chainId == CHAIN_ID_ROOTSTOCK)
      return "Rootstock";
    if (chainId == CHAIN_ID_MANTLE)
      return "Mantle";
    if (chainId == CHAIN_ID_SCROLL)
      return "Scroll";
    if (chainId == CHAIN_ID_BLAST)
      return "Blast";
    if (chainId == CHAIN_ID_XLAYER)
      return "Xlayer";
    if (chainId == CHAIN_ID_BERACHAIN)
      return "Berachain";
    if (chainId == CHAIN_ID_SNAXCHAIN)
      return "Snaxchain";
    if (chainId == CHAIN_ID_UNICHAIN)
      return "Unichain";
    if (chainId == CHAIN_ID_WORLDCHAIN)
      return "Worldchain";
    revert UnsupportedChainId(chainId);
  }

  function _defaultRPC(uint16 chainId) internal pure returns (string memory) {
    if (chainId == CHAIN_ID_ACALA)
      return "https://eth-rpc-acala.aca-api.network";
    if (chainId == CHAIN_ID_ARBITRUM)
      return "https://arb1.arbitrum.io/rpc";
    if (chainId == CHAIN_ID_AURORA)
      return "";
    if (chainId == CHAIN_ID_AVALANCHE)
      return "https://rpc.ankr.com/avalanche";
    if (chainId == CHAIN_ID_BASE)
      return "https://mainnet.base.org";
    if (chainId == CHAIN_ID_BSC)
      return "https://bscrpc.com";
    if (chainId == CHAIN_ID_CELO)
      return "https://rpc.ankr.com/celo";
    if (chainId == CHAIN_ID_ETHEREUM)
      return "https://rpc.ankr.com/eth";
    if (chainId == CHAIN_ID_FANTOM)
      return "https://rpcapi.fantom.network";
    if (chainId == CHAIN_ID_GNOSIS)
      return "https://rpc.ankr.com/gnosis";
    if (chainId == CHAIN_ID_KARURA)
      return "https://eth-rpc-karura.aca-api.network";
    if (chainId == CHAIN_ID_KLAYTN)
      return "https://rpc.ankr.com/klaytn";
    if (chainId == CHAIN_ID_MOONBEAM)
      return "https://rpc.ankr.com/moonbeam";
    if (chainId == CHAIN_ID_OASIS)
      return "https://emerald.oasis.dev";
    if (chainId == CHAIN_ID_OPTIMISM)
      return "https://mainnet.optimism.io";
    if (chainId == CHAIN_ID_POLYGON)
      return "https://rpc.ankr.com/polygon";
    if (chainId == CHAIN_ID_ROOTSTOCK)
      return "https://public-node.rsk.co";
    if (chainId == CHAIN_ID_MANTLE)
      return "https://rpc.mantle.xyz";
    if (chainId == CHAIN_ID_SCROLL)
      return "https://rpc.ankr.com/scroll";
    if (chainId == CHAIN_ID_BLAST)
      return "https://rpc.blast.io";
    if (chainId == CHAIN_ID_XLAYER)
      return "https://xlayerrpc.okx.com/";
    if (chainId == CHAIN_ID_BERACHAIN)
      return "https://rpc.berachain.com";
    if (chainId == CHAIN_ID_SNAXCHAIN)
      return "https://mainnet.snaxchain.io";
    if (chainId == CHAIN_ID_UNICHAIN)
      return "https://mainnet.unichain.org";
    if (chainId == CHAIN_ID_WORLDCHAIN)
      return "https://worldchain-mainnet.g.alchemy.com/public";
    revert UnsupportedChainId(chainId);
  }

  function _coreBridge(uint16 chainId) internal pure returns (address) {
    if (chainId == CHAIN_ID_ACALA)
      return 0xa321448d90d4e5b0A732867c18eA198e75CAC48E;
    if (chainId == CHAIN_ID_ARBITRUM)
      return 0xa5f208e072434bC67592E4C49C1B991BA79BCA46;
    if (chainId == CHAIN_ID_AURORA)
      return 0xa321448d90d4e5b0A732867c18eA198e75CAC48E;
    if (chainId == CHAIN_ID_AVALANCHE)
      return 0x54a8e5f9c4CbA08F9943965859F6c34eAF03E26c;
    if (chainId == CHAIN_ID_BASE)
      return 0xbebdb6C8ddC678FfA9f8748f85C815C556Dd8ac6;
    if (chainId == CHAIN_ID_BSC)
      return 0x98f3c9e6E3fAce36bAAd05FE09d375Ef1464288B;
    if (chainId == CHAIN_ID_CELO)
      return 0xa321448d90d4e5b0A732867c18eA198e75CAC48E;
    if (chainId == CHAIN_ID_ETHEREUM)
      return 0x98f3c9e6E3fAce36bAAd05FE09d375Ef1464288B;
    if (chainId == CHAIN_ID_FANTOM)
      return 0x126783A6Cb203a3E35344528B26ca3a0489a1485;
    if (chainId == CHAIN_ID_GNOSIS)
      return 0xa321448d90d4e5b0A732867c18eA198e75CAC48E;
    if (chainId == CHAIN_ID_KARURA)
      return 0xa321448d90d4e5b0A732867c18eA198e75CAC48E;
    if (chainId == CHAIN_ID_KLAYTN)
      return 0x0C21603c4f3a6387e241c0091A7EA39E43E90bb7;
    if (chainId == CHAIN_ID_MOONBEAM)
      return 0xC8e2b0cD52Cf01b0Ce87d389Daa3d414d4cE29f3;
    if (chainId == CHAIN_ID_OASIS)
      return 0xfE8cD454b4A1CA468B57D79c0cc77Ef5B6f64585;
    if (chainId == CHAIN_ID_OPTIMISM)
      return 0xEe91C335eab126dF5fDB3797EA9d6aD93aeC9722;
    if (chainId == CHAIN_ID_POLYGON)
      return 0x7A4B5a56256163F07b2C80A7cA55aBE66c4ec4d7;
    if (chainId == CHAIN_ID_ROOTSTOCK)
      return 0xbebdb6C8ddC678FfA9f8748f85C815C556Dd8ac6;
    if (chainId == CHAIN_ID_MANTLE)
      return 0xbebdb6C8ddC678FfA9f8748f85C815C556Dd8ac6;
    if (chainId == CHAIN_ID_SCROLL)
      return 0xbebdb6C8ddC678FfA9f8748f85C815C556Dd8ac6;
    if (chainId == CHAIN_ID_BLAST)
      return 0xbebdb6C8ddC678FfA9f8748f85C815C556Dd8ac6;
    if (chainId == CHAIN_ID_XLAYER)
      return 0x194B123c5E96B9b2E49763619985790Dc241CAC0;
    if (chainId == CHAIN_ID_BERACHAIN)
      return 0xCa1D5a146B03f6303baF59e5AD5615ae0b9d146D;
    if (chainId == CHAIN_ID_SNAXCHAIN)
      return 0xc1BA3CC4bFE724A08FbbFbF64F8db196738665f4;
    if (chainId == CHAIN_ID_UNICHAIN)
      return 0xCa1D5a146B03f6303baF59e5AD5615ae0b9d146D;
    if (chainId == CHAIN_ID_WORLDCHAIN)
      return 0xcbcEe4e081464A15d8Ad5f58BB493954421eB506;
    revert UnsupportedChainId(chainId);
  }

  function _tokenBridge(uint16 chainId) internal pure returns (address) {
    if (chainId == CHAIN_ID_ACALA)
      return 0xae9d7fe007b3327AA64A32824Aaac52C42a6E624;
    if (chainId == CHAIN_ID_ARBITRUM)
      return 0x0b2402144Bb366A632D14B83F244D2e0e21bD39c;
    if (chainId == CHAIN_ID_AURORA)
      return 0x51b5123a7b0F9b2bA265f9c4C8de7D78D52f510F;
    if (chainId == CHAIN_ID_AVALANCHE)
      return 0x0e082F06FF657D94310cB8cE8B0D9a04541d8052;
    if (chainId == CHAIN_ID_BASE)
      return 0x8d2de8d2f73F1F4cAB472AC9A881C9b123C79627;
    if (chainId == CHAIN_ID_BSC)
      return 0xB6F6D86a8f9879A9c87f643768d9efc38c1Da6E7;
    if (chainId == CHAIN_ID_CELO)
      return 0x796Dff6D74F3E27060B71255Fe517BFb23C93eed;
    if (chainId == CHAIN_ID_ETHEREUM)
      return 0x3ee18B2214AFF97000D974cf647E7C347E8fa585;
    if (chainId == CHAIN_ID_FANTOM)
      return 0x7C9Fc5741288cDFdD83CeB07f3ea7e22618D79D2;
    if (chainId == CHAIN_ID_GNOSIS)
      return address(0);
    if (chainId == CHAIN_ID_KARURA)
      return 0xae9d7fe007b3327AA64A32824Aaac52C42a6E624;
    if (chainId == CHAIN_ID_KLAYTN)
      return 0x5b08ac39EAED75c0439FC750d9FE7E1F9dD0193F;
    if (chainId == CHAIN_ID_MOONBEAM)
      return 0xB1731c586ca89a23809861c6103F0b96B3F57D92;
    if (chainId == CHAIN_ID_OASIS)
      return 0x5848C791e09901b40A9Ef749f2a6735b418d7564;
    if (chainId == CHAIN_ID_OPTIMISM)
      return 0x1D68124e65faFC907325e3EDbF8c4d84499DAa8b;
    if (chainId == CHAIN_ID_POLYGON)
      return 0x5a58505a96D1dbf8dF91cB21B54419FC36e93fdE;
    if (chainId == CHAIN_ID_ROOTSTOCK)
      return address(0);
    if (chainId == CHAIN_ID_MANTLE)
      return 0x24850c6f61C438823F01B7A3BF2B89B72174Fa9d;
    if (chainId == CHAIN_ID_SCROLL)
      return 0x24850c6f61C438823F01B7A3BF2B89B72174Fa9d;
    if (chainId == CHAIN_ID_BLAST)
      return 0x24850c6f61C438823F01B7A3BF2B89B72174Fa9d;
    if (chainId == CHAIN_ID_XLAYER)
      return 0x5537857664B0f9eFe38C9f320F75fEf23234D904;
    if (chainId == CHAIN_ID_BERACHAIN)
      return 0x3Ff72741fd67D6AD0668d93B41a09248F4700560;
    if (chainId == CHAIN_ID_SNAXCHAIN)
      return 0x8B94bfE456B48a6025b92E11Be393BAa86e68410;
    if (chainId == CHAIN_ID_UNICHAIN)
      return 0x3Ff72741fd67D6AD0668d93B41a09248F4700560;
    if (chainId == CHAIN_ID_WORLDCHAIN)
      return 0xc309275443519adca74c9136b02A38eF96E3a1f6;
    revert UnsupportedChainId(chainId);
  }

  function _wormholeRelayer(uint16 chainId) internal pure returns (address) {
    if (chainId == CHAIN_ID_ACALA)
      return address(0);
    if (chainId == CHAIN_ID_ARBITRUM)
      return 0x27428DD2d3DD32A4D7f7C497eAaa23130d894911;
    if (chainId == CHAIN_ID_AURORA)
      return address(0);
    if (chainId == CHAIN_ID_AVALANCHE)
      return 0x27428DD2d3DD32A4D7f7C497eAaa23130d894911;
    if (chainId == CHAIN_ID_BASE)
      return 0x706F82e9bb5b0813501714Ab5974216704980e31;
    if (chainId == CHAIN_ID_BSC)
      return 0x27428DD2d3DD32A4D7f7C497eAaa23130d894911;
    if (chainId == CHAIN_ID_CELO)
      return 0x27428DD2d3DD32A4D7f7C497eAaa23130d894911;
    if (chainId == CHAIN_ID_ETHEREUM)
      return 0x27428DD2d3DD32A4D7f7C497eAaa23130d894911;
    if (chainId == CHAIN_ID_FANTOM)
      return 0x27428DD2d3DD32A4D7f7C497eAaa23130d894911;
    if (chainId == CHAIN_ID_GNOSIS)
      return address(0);
    if (chainId == CHAIN_ID_KARURA)
      return address(0);
    if (chainId == CHAIN_ID_KLAYTN)
      return 0x27428DD2d3DD32A4D7f7C497eAaa23130d894911;
    if (chainId == CHAIN_ID_MOONBEAM)
      return 0x27428DD2d3DD32A4D7f7C497eAaa23130d894911;
    if (chainId == CHAIN_ID_OASIS)
      return address(0);
    if (chainId == CHAIN_ID_OPTIMISM)
      return 0x27428DD2d3DD32A4D7f7C497eAaa23130d894911;
    if (chainId == CHAIN_ID_POLYGON)
      return 0x27428DD2d3DD32A4D7f7C497eAaa23130d894911;
    if (chainId == CHAIN_ID_ROOTSTOCK)
      return address(0);
    if (chainId == CHAIN_ID_MANTLE)
      return 0x27428DD2d3DD32A4D7f7C497eAaa23130d894911;
    if (chainId == CHAIN_ID_SCROLL)
      return 0x27428DD2d3DD32A4D7f7C497eAaa23130d894911;
    if (chainId == CHAIN_ID_BLAST)
      return 0x27428DD2d3DD32A4D7f7C497eAaa23130d894911;
    if (chainId == CHAIN_ID_XLAYER)
      return 0x27428DD2d3DD32A4D7f7C497eAaa23130d894911;
    if (chainId == CHAIN_ID_BERACHAIN)
      return address(0);
    if (chainId == CHAIN_ID_SNAXCHAIN)
      return 0x27428DD2d3DD32A4D7f7C497eAaa23130d894911;
    if (chainId == CHAIN_ID_UNICHAIN)
      return address(0);
    if (chainId == CHAIN_ID_WORLDCHAIN)
      return 0x1520cC9e779c56dab5866BEbFb885C86840c33d3;
    revert UnsupportedChainId(chainId);
  }

  function _cctpDomain(uint16 chainId) internal pure returns (uint32) {
    if (chainId == CHAIN_ID_ACALA)
      return INVALID_CCTP_DOMAIN;
    if (chainId == CHAIN_ID_ARBITRUM)
      return CCTP_DOMAIN_ARBITRUM;
    if (chainId == CHAIN_ID_AURORA)
      return INVALID_CCTP_DOMAIN;
    if (chainId == CHAIN_ID_AVALANCHE)
      return CCTP_DOMAIN_AVALANCHE;
    if (chainId == CHAIN_ID_BASE)
      return CCTP_DOMAIN_BASE;
    if (chainId == CHAIN_ID_BSC)
      return INVALID_CCTP_DOMAIN;
    if (chainId == CHAIN_ID_CELO)
      return INVALID_CCTP_DOMAIN;
    if (chainId == CHAIN_ID_ETHEREUM)
      return CCTP_DOMAIN_ETHEREUM;
    if (chainId == CHAIN_ID_FANTOM)
      return INVALID_CCTP_DOMAIN;
    if (chainId == CHAIN_ID_GNOSIS)
      return INVALID_CCTP_DOMAIN;
    if (chainId == CHAIN_ID_KARURA)
      return INVALID_CCTP_DOMAIN;
    if (chainId == CHAIN_ID_KLAYTN)
      return INVALID_CCTP_DOMAIN;
    if (chainId == CHAIN_ID_MOONBEAM)
      return INVALID_CCTP_DOMAIN;
    if (chainId == CHAIN_ID_OASIS)
      return INVALID_CCTP_DOMAIN;
    if (chainId == CHAIN_ID_OPTIMISM)
      return CCTP_DOMAIN_OPTIMISM;
    if (chainId == CHAIN_ID_POLYGON)
      return CCTP_DOMAIN_POLYGON;
    if (chainId == CHAIN_ID_ROOTSTOCK)
      return INVALID_CCTP_DOMAIN;
    if (chainId == CHAIN_ID_MANTLE)
      return INVALID_CCTP_DOMAIN;
    if (chainId == CHAIN_ID_SCROLL)
      return INVALID_CCTP_DOMAIN;
    if (chainId == CHAIN_ID_BLAST)
      return INVALID_CCTP_DOMAIN;
    if (chainId == CHAIN_ID_XLAYER)
      return INVALID_CCTP_DOMAIN;
    if (chainId == CHAIN_ID_BERACHAIN)
      return INVALID_CCTP_DOMAIN;
    if (chainId == CHAIN_ID_SNAXCHAIN)
      return INVALID_CCTP_DOMAIN;
    if (chainId == CHAIN_ID_UNICHAIN)
      return CCTP_DOMAIN_UNICHAIN;
    if (chainId == CHAIN_ID_WORLDCHAIN)
      return INVALID_CCTP_DOMAIN;
    revert UnsupportedChainId(chainId);
  }

  function _usdc(uint16 chainId) internal pure returns (address) {
    if (chainId == CHAIN_ID_ACALA)
      return address(0);
    if (chainId == CHAIN_ID_ARBITRUM)
      return 0xaf88d065e77c8cC2239327C5EDb3A432268e5831;
    if (chainId == CHAIN_ID_AURORA)
      return address(0);
    if (chainId == CHAIN_ID_AVALANCHE)
      return 0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E;
    if (chainId == CHAIN_ID_BASE)
      return 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913;
    if (chainId == CHAIN_ID_BSC)
      return address(0);
    if (chainId == CHAIN_ID_CELO)
      return address(0);
    if (chainId == CHAIN_ID_ETHEREUM)
      return 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;
    if (chainId == CHAIN_ID_FANTOM)
      return address(0);
    if (chainId == CHAIN_ID_GNOSIS)
      return address(0);
    if (chainId == CHAIN_ID_KARURA)
      return address(0);
    if (chainId == CHAIN_ID_KLAYTN)
      return address(0);
    if (chainId == CHAIN_ID_MOONBEAM)
      return address(0);
    if (chainId == CHAIN_ID_OASIS)
      return address(0);
    if (chainId == CHAIN_ID_OPTIMISM)
      return 0x0b2C639c533813f4Aa9D7837CAf62653d097Ff85;
    if (chainId == CHAIN_ID_POLYGON)
      return 0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359;
    if (chainId == CHAIN_ID_ROOTSTOCK)
      return address(0);
    if (chainId == CHAIN_ID_MANTLE)
      return address(0);
    if (chainId == CHAIN_ID_SCROLL)
      return address(0);
    if (chainId == CHAIN_ID_BLAST)
      return address(0);
    if (chainId == CHAIN_ID_XLAYER)
      return address(0);
    if (chainId == CHAIN_ID_BERACHAIN)
      return address(0);
    if (chainId == CHAIN_ID_SNAXCHAIN)
      return address(0);
    if (chainId == CHAIN_ID_UNICHAIN)
      return 0x078D782b760474a361dDA0AF3839290b0EF57AD6;
    if (chainId == CHAIN_ID_WORLDCHAIN)
      return address(0);
    revert UnsupportedChainId(chainId);
  }

  function _cctpMessageTransmitter(uint16 chainId) internal pure returns (address) {
    if (chainId == CHAIN_ID_ACALA)
      return address(0);
    if (chainId == CHAIN_ID_ARBITRUM)
      return 0xC30362313FBBA5cf9163F0bb16a0e01f01A896ca;
    if (chainId == CHAIN_ID_AURORA)
      return address(0);
    if (chainId == CHAIN_ID_AVALANCHE)
      return 0x8186359aF5F57FbB40c6b14A588d2A59C0C29880;
    if (chainId == CHAIN_ID_BASE)
      return 0xAD09780d193884d503182aD4588450C416D6F9D4;
    if (chainId == CHAIN_ID_BSC)
      return address(0);
    if (chainId == CHAIN_ID_CELO)
      return address(0);
    if (chainId == CHAIN_ID_ETHEREUM)
      return 0x0a992d191DEeC32aFe36203Ad87D7d289a738F81;
    if (chainId == CHAIN_ID_FANTOM)
      return address(0);
    if (chainId == CHAIN_ID_GNOSIS)
      return address(0);
    if (chainId == CHAIN_ID_KARURA)
      return address(0);
    if (chainId == CHAIN_ID_KLAYTN)
      return address(0);
    if (chainId == CHAIN_ID_MOONBEAM)
      return address(0);
    if (chainId == CHAIN_ID_OASIS)
      return address(0);
    if (chainId == CHAIN_ID_OPTIMISM)
      return 0x4D41f22c5a0e5c74090899E5a8Fb597a8842b3e8;
    if (chainId == CHAIN_ID_POLYGON)
      return 0xF3be9355363857F3e001be68856A2f96b4C39Ba9;
    if (chainId == CHAIN_ID_ROOTSTOCK)
      return address(0);
    if (chainId == CHAIN_ID_MANTLE)
      return address(0);
    if (chainId == CHAIN_ID_SCROLL)
      return address(0);
    if (chainId == CHAIN_ID_BLAST)
      return address(0);
    if (chainId == CHAIN_ID_XLAYER)
      return address(0);
    if (chainId == CHAIN_ID_BERACHAIN)
      return address(0);
    if (chainId == CHAIN_ID_SNAXCHAIN)
      return address(0);
    if (chainId == CHAIN_ID_UNICHAIN)
      return 0x353bE9E2E38AB1D19104534e4edC21c643Df86f4;
    if (chainId == CHAIN_ID_WORLDCHAIN)
      return address(0);
    revert UnsupportedChainId(chainId);
  }

  function _cctpTokenMessenger(uint16 chainId) internal pure returns (address) {
    if (chainId == CHAIN_ID_ACALA)
      return address(0);
    if (chainId == CHAIN_ID_ARBITRUM)
      return 0x19330d10D9Cc8751218eaf51E8885D058642E08A;
    if (chainId == CHAIN_ID_AURORA)
      return address(0);
    if (chainId == CHAIN_ID_AVALANCHE)
      return 0x6B25532e1060CE10cc3B0A99e5683b91BFDe6982;
    if (chainId == CHAIN_ID_BASE)
      return 0x1682Ae6375C4E4A97e4B583BC394c861A46D8962;
    if (chainId == CHAIN_ID_BSC)
      return address(0);
    if (chainId == CHAIN_ID_CELO)
      return address(0);
    if (chainId == CHAIN_ID_ETHEREUM)
      return 0xBd3fa81B58Ba92a82136038B25aDec7066af3155;
    if (chainId == CHAIN_ID_FANTOM)
      return address(0);
    if (chainId == CHAIN_ID_GNOSIS)
      return address(0);
    if (chainId == CHAIN_ID_KARURA)
      return address(0);
    if (chainId == CHAIN_ID_KLAYTN)
      return address(0);
    if (chainId == CHAIN_ID_MOONBEAM)
      return address(0);
    if (chainId == CHAIN_ID_OASIS)
      return address(0);
    if (chainId == CHAIN_ID_OPTIMISM)
      return 0x2B4069517957735bE00ceE0fadAE88a26365528f;
    if (chainId == CHAIN_ID_POLYGON)
      return 0x9daF8c91AEFAE50b9c0E69629D3F6Ca40cA3B3FE;
    if (chainId == CHAIN_ID_ROOTSTOCK)
      return address(0);
    if (chainId == CHAIN_ID_MANTLE)
      return address(0);
    if (chainId == CHAIN_ID_SCROLL)
      return address(0);
    if (chainId == CHAIN_ID_BLAST)
      return address(0);
    if (chainId == CHAIN_ID_XLAYER)
      return address(0);
    if (chainId == CHAIN_ID_BERACHAIN)
      return address(0);
    if (chainId == CHAIN_ID_SNAXCHAIN)
      return address(0);
    if (chainId == CHAIN_ID_UNICHAIN)
      return 0x4e744b28E787c3aD0e810eD65A24461D4ac5a762;
    if (chainId == CHAIN_ID_WORLDCHAIN)
      return address(0);
    revert UnsupportedChainId(chainId);
  }
}

library TestnetChainConstants {
  function _chainName(uint16 chainId) internal pure returns (string memory) {
    if (chainId == CHAIN_ID_ACALA)
      return "Acala";
    if (chainId == CHAIN_ID_AURORA)
      return "Aurora";
    if (chainId == CHAIN_ID_AVALANCHE)
      return "Avalanche";
    if (chainId == CHAIN_ID_BSC)
      return "Bsc";
    if (chainId == CHAIN_ID_CELO)
      return "Celo";
    if (chainId == CHAIN_ID_FANTOM)
      return "Fantom";
    if (chainId == CHAIN_ID_GNOSIS)
      return "Gnosis";
    if (chainId == CHAIN_ID_KARURA)
      return "Karura";
    if (chainId == CHAIN_ID_KLAYTN)
      return "Klaytn";
    if (chainId == CHAIN_ID_MOONBEAM)
      return "Moonbeam";
    if (chainId == CHAIN_ID_NEON)
      return "Neon";
    if (chainId == CHAIN_ID_OASIS)
      return "Oasis";
    if (chainId == CHAIN_ID_ROOTSTOCK)
      return "Rootstock";
    if (chainId == CHAIN_ID_SEPOLIA)
      return "Sepolia";
    if (chainId == CHAIN_ID_ARBITRUM_SEPOLIA)
      return "ArbitrumSepolia";
    if (chainId == CHAIN_ID_BASE_SEPOLIA)
      return "BaseSepolia";
    if (chainId == CHAIN_ID_OPTIMISM_SEPOLIA)
      return "OptimismSepolia";
    if (chainId == CHAIN_ID_HOLESKY)
      return "Holesky";
    if (chainId == CHAIN_ID_POLYGON_SEPOLIA)
      return "PolygonSepolia";
    if (chainId == CHAIN_ID_MANTLE)
      return "Mantle";
    if (chainId == CHAIN_ID_SCROLL)
      return "Scroll";
    if (chainId == CHAIN_ID_BLAST)
      return "Blast";
    if (chainId == CHAIN_ID_XLAYER)
      return "Xlayer";
    if (chainId == CHAIN_ID_LINEA)
      return "Linea";
    if (chainId == CHAIN_ID_BERACHAIN)
      return "Berachain";
    if (chainId == CHAIN_ID_SEIEVM)
      return "Seievm";
    if (chainId == CHAIN_ID_SNAXCHAIN)
      return "Snaxchain";
    if (chainId == CHAIN_ID_UNICHAIN)
      return "Unichain";
    if (chainId == CHAIN_ID_WORLDCHAIN)
      return "Worldchain";
    if (chainId == CHAIN_ID_INK)
      return "Ink";
    if (chainId == CHAIN_ID_HYPER_E_V_M)
      return "HyperEVM";
    if (chainId == CHAIN_ID_MONAD)
      return "Monad";
    revert UnsupportedChainId(chainId);
  }

  function _defaultRPC(uint16 chainId) internal pure returns (string memory) {
    if (chainId == CHAIN_ID_ACALA)
      return "https://eth-rpc-acala-testnet.aca-staging.network";
    if (chainId == CHAIN_ID_AURORA)
      return "";
    if (chainId == CHAIN_ID_AVALANCHE)
      return "https://api.avax-test.network/ext/bc/C/rpc";
    if (chainId == CHAIN_ID_BSC)
      return "https://data-seed-prebsc-1-s3.binance.org:8545";
    if (chainId == CHAIN_ID_CELO)
      return "https://alfajores-forno.celo-testnet.org";
    if (chainId == CHAIN_ID_FANTOM)
      return "https://rpc.testnet.fantom.network";
    if (chainId == CHAIN_ID_GNOSIS)
      return "https://rpc.chiadochain.net";
    if (chainId == CHAIN_ID_KARURA)
      return "https://eth-rpc-karura-testnet.aca-staging.network";
    if (chainId == CHAIN_ID_KLAYTN)
      return "https://rpc.ankr.com/klaytn_testnet";
    if (chainId == CHAIN_ID_MOONBEAM)
      return "https://rpc.api.moonbase.moonbeam.network";
    if (chainId == CHAIN_ID_NEON)
      return "";
    if (chainId == CHAIN_ID_OASIS)
      return "https://testnet.emerald.oasis.io";
    if (chainId == CHAIN_ID_ROOTSTOCK)
      return "https://public-node.testnet.rsk.co";
    if (chainId == CHAIN_ID_SEPOLIA)
      return "https://ethereum-sepolia.publicnode.com";
    if (chainId == CHAIN_ID_ARBITRUM_SEPOLIA)
      return "https://sepolia-rollup.arbitrum.io/rpc";
    if (chainId == CHAIN_ID_BASE_SEPOLIA)
      return "https://sepolia.base.org";
    if (chainId == CHAIN_ID_OPTIMISM_SEPOLIA)
      return "https://sepolia.optimism.io";
    if (chainId == CHAIN_ID_HOLESKY)
      return "";
    if (chainId == CHAIN_ID_POLYGON_SEPOLIA)
      return "https://rpc-amoy.polygon.technology/";
    if (chainId == CHAIN_ID_MANTLE)
      return "https://mantle-sepolia.drpc.org";
    if (chainId == CHAIN_ID_SCROLL)
      return "https://rpc.ankr.com/scroll_sepolia_testnet";
    if (chainId == CHAIN_ID_BLAST)
      return "https://sepolia.blast.io";
    if (chainId == CHAIN_ID_XLAYER)
      return "https://testrpc.xlayer.tech/";
    if (chainId == CHAIN_ID_LINEA)
      return "https://rpc.sepolia.linea.build";
    if (chainId == CHAIN_ID_BERACHAIN)
      return "https://artio.rpc.berachain.com";
    if (chainId == CHAIN_ID_SEIEVM)
      return "https://evm-rpc-testnet.sei-apis.com/";
    if (chainId == CHAIN_ID_SNAXCHAIN)
      return "https://testnet.snaxchain.io";
    if (chainId == CHAIN_ID_UNICHAIN)
      return "https://sepolia.unichain.org";
    if (chainId == CHAIN_ID_WORLDCHAIN)
      return "https://worldchain-sepolia.g.alchemy.com/public";
    if (chainId == CHAIN_ID_INK)
      return "https://rpc-qnd-sepolia.inkonchain.com";
    if (chainId == CHAIN_ID_HYPER_E_V_M)
      return "https://api.hyperliquid-testnet.xyz/evm";
    if (chainId == CHAIN_ID_MONAD)
      return "https://testnet-rpc.monad.xyz";
    revert UnsupportedChainId(chainId);
  }

  function _coreBridge(uint16 chainId) internal pure returns (address) {
    if (chainId == CHAIN_ID_ACALA)
      return 0x64fb09E405D2043ed7785a29E296C766D56F2056;
    if (chainId == CHAIN_ID_AURORA)
      return 0xBd07292de7b505a4E803CEe286184f7Acf908F5e;
    if (chainId == CHAIN_ID_AVALANCHE)
      return 0x7bbcE28e64B3F8b84d876Ab298393c38ad7aac4C;
    if (chainId == CHAIN_ID_BSC)
      return 0x68605AD7b15c732a30b1BbC62BE8F2A509D74b4D;
    if (chainId == CHAIN_ID_CELO)
      return 0x88505117CA88e7dd2eC6EA1E13f0948db2D50D56;
    if (chainId == CHAIN_ID_FANTOM)
      return 0x1BB3B4119b7BA9dfad76B0545fb3F531383c3bB7;
    if (chainId == CHAIN_ID_GNOSIS)
      return 0xBB73cB66C26740F31d1FabDC6b7A46a038A300dd;
    if (chainId == CHAIN_ID_KARURA)
      return 0x64fb09E405D2043ed7785a29E296C766D56F2056;
    if (chainId == CHAIN_ID_KLAYTN)
      return 0x1830CC6eE66c84D2F177B94D544967c774E624cA;
    if (chainId == CHAIN_ID_MOONBEAM)
      return 0xa5B7D85a8f27dd7907dc8FdC21FA5657D5E2F901;
    if (chainId == CHAIN_ID_NEON)
      return 0x268557122Ffd64c85750d630b716471118F323c8;
    if (chainId == CHAIN_ID_OASIS)
      return 0xc1C338397ffA53a2Eb12A7038b4eeb34791F8aCb;
    if (chainId == CHAIN_ID_ROOTSTOCK)
      return 0xbebdb6C8ddC678FfA9f8748f85C815C556Dd8ac6;
    if (chainId == CHAIN_ID_SEPOLIA)
      return 0x4a8bc80Ed5a4067f1CCf107057b8270E0cC11A78;
    if (chainId == CHAIN_ID_ARBITRUM_SEPOLIA)
      return 0x6b9C8671cdDC8dEab9c719bB87cBd3e782bA6a35;
    if (chainId == CHAIN_ID_BASE_SEPOLIA)
      return 0x79A1027a6A159502049F10906D333EC57E95F083;
    if (chainId == CHAIN_ID_OPTIMISM_SEPOLIA)
      return 0x31377888146f3253211EFEf5c676D41ECe7D58Fe;
    if (chainId == CHAIN_ID_HOLESKY)
      return 0xa10f2eF61dE1f19f586ab8B6F2EbA89bACE63F7a;
    if (chainId == CHAIN_ID_POLYGON_SEPOLIA)
      return 0x6b9C8671cdDC8dEab9c719bB87cBd3e782bA6a35;
    if (chainId == CHAIN_ID_MANTLE)
      return 0x376428e7f26D5867e69201b275553C45B09EE090;
    if (chainId == CHAIN_ID_SCROLL)
      return 0x055F47F1250012C6B20c436570a76e52c17Af2D5;
    if (chainId == CHAIN_ID_BLAST)
      return 0x473e002D7add6fB67a4964F13bFd61280Ca46886;
    if (chainId == CHAIN_ID_XLAYER)
      return 0xA31aa3FDb7aF7Db93d18DDA4e19F811342EDF780;
    if (chainId == CHAIN_ID_LINEA)
      return 0x79A1027a6A159502049F10906D333EC57E95F083;
    if (chainId == CHAIN_ID_BERACHAIN)
      return 0xBB73cB66C26740F31d1FabDC6b7A46a038A300dd;
    if (chainId == CHAIN_ID_SEIEVM)
      return 0xBB73cB66C26740F31d1FabDC6b7A46a038A300dd;
    if (chainId == CHAIN_ID_SNAXCHAIN)
      return 0xBB73cB66C26740F31d1FabDC6b7A46a038A300dd;
    if (chainId == CHAIN_ID_UNICHAIN)
      return 0xBB73cB66C26740F31d1FabDC6b7A46a038A300dd;
    if (chainId == CHAIN_ID_WORLDCHAIN)
      return 0xe5E02cD12B6FcA153b0d7fF4bF55730AE7B3C93A;
    if (chainId == CHAIN_ID_INK)
      return 0xBB73cB66C26740F31d1FabDC6b7A46a038A300dd;
    if (chainId == CHAIN_ID_HYPER_E_V_M)
      return 0xBB73cB66C26740F31d1FabDC6b7A46a038A300dd;
    if (chainId == CHAIN_ID_MONAD)
      return 0xBB73cB66C26740F31d1FabDC6b7A46a038A300dd;
    revert UnsupportedChainId(chainId);
  }

  function _tokenBridge(uint16 chainId) internal pure returns (address) {
    if (chainId == CHAIN_ID_ACALA)
      return 0xe157115ef34c93145Fec2FE53706846853B07F42;
    if (chainId == CHAIN_ID_AURORA)
      return 0xD05eD3ad637b890D68a854d607eEAF11aF456fba;
    if (chainId == CHAIN_ID_AVALANCHE)
      return 0x61E44E506Ca5659E6c0bba9b678586fA2d729756;
    if (chainId == CHAIN_ID_BSC)
      return 0x9dcF9D205C9De35334D646BeE44b2D2859712A09;
    if (chainId == CHAIN_ID_CELO)
      return 0x05ca6037eC51F8b712eD2E6Fa72219FEaE74E153;
    if (chainId == CHAIN_ID_FANTOM)
      return 0x599CEa2204B4FaECd584Ab1F2b6aCA137a0afbE8;
    if (chainId == CHAIN_ID_GNOSIS)
      return address(0);
    if (chainId == CHAIN_ID_KARURA)
      return 0xe157115ef34c93145Fec2FE53706846853B07F42;
    if (chainId == CHAIN_ID_KLAYTN)
      return 0xC7A13BE098720840dEa132D860fDfa030884b09A;
    if (chainId == CHAIN_ID_MOONBEAM)
      return 0xbc976D4b9D57E57c3cA52e1Fd136C45FF7955A96;
    if (chainId == CHAIN_ID_NEON)
      return 0xEe3dB83916Ccdc3593b734F7F2d16D630F39F1D0;
    if (chainId == CHAIN_ID_OASIS)
      return 0x88d8004A9BdbfD9D28090A02010C19897a29605c;
    if (chainId == CHAIN_ID_ROOTSTOCK)
      return address(0);
    if (chainId == CHAIN_ID_SEPOLIA)
      return 0xDB5492265f6038831E89f495670FF909aDe94bd9;
    if (chainId == CHAIN_ID_ARBITRUM_SEPOLIA)
      return 0xC7A204bDBFe983FCD8d8E61D02b475D4073fF97e;
    if (chainId == CHAIN_ID_BASE_SEPOLIA)
      return 0x86F55A04690fd7815A3D802bD587e83eA888B239;
    if (chainId == CHAIN_ID_OPTIMISM_SEPOLIA)
      return 0x99737Ec4B815d816c49A385943baf0380e75c0Ac;
    if (chainId == CHAIN_ID_HOLESKY)
      return 0x76d093BbaE4529a342080546cAFEec4AcbA59EC6;
    if (chainId == CHAIN_ID_POLYGON_SEPOLIA)
      return 0xC7A204bDBFe983FCD8d8E61D02b475D4073fF97e;
    if (chainId == CHAIN_ID_MANTLE)
      return 0x75Bfa155a9D7A3714b0861c8a8aF0C4633c45b5D;
    if (chainId == CHAIN_ID_SCROLL)
      return 0x22427d90B7dA3fA4642F7025A854c7254E4e45BF;
    if (chainId == CHAIN_ID_BLAST)
      return 0x430855B4D43b8AEB9D2B9869B74d58dda79C0dB2;
    if (chainId == CHAIN_ID_XLAYER)
      return 0xdA91a06299BBF302091B053c6B9EF86Eff0f930D;
    if (chainId == CHAIN_ID_LINEA)
      return 0xC7A204bDBFe983FCD8d8E61D02b475D4073fF97e;
    if (chainId == CHAIN_ID_BERACHAIN)
      return 0xa10f2eF61dE1f19f586ab8B6F2EbA89bACE63F7a;
    if (chainId == CHAIN_ID_SEIEVM)
      return 0x23908A62110e21C04F3A4e011d24F901F911744A;
    if (chainId == CHAIN_ID_SNAXCHAIN)
      return 0xa10f2eF61dE1f19f586ab8B6F2EbA89bACE63F7a;
    if (chainId == CHAIN_ID_UNICHAIN)
      return 0xa10f2eF61dE1f19f586ab8B6F2EbA89bACE63F7a;
    if (chainId == CHAIN_ID_WORLDCHAIN)
      return 0x430855B4D43b8AEB9D2B9869B74d58dda79C0dB2;
    if (chainId == CHAIN_ID_INK)
      return 0x376428e7f26D5867e69201b275553C45B09EE090;
    if (chainId == CHAIN_ID_HYPER_E_V_M)
      return 0x4a8bc80Ed5a4067f1CCf107057b8270E0cC11A78;
    if (chainId == CHAIN_ID_MONAD)
      return 0xF323dcDe4d33efe83cf455F78F9F6cc656e6B659;
    revert UnsupportedChainId(chainId);
  }

  function _wormholeRelayer(uint16 chainId) internal pure returns (address) {
    if (chainId == CHAIN_ID_ACALA)
      return address(0);
    if (chainId == CHAIN_ID_AURORA)
      return address(0);
    if (chainId == CHAIN_ID_AVALANCHE)
      return 0xA3cF45939bD6260bcFe3D66bc73d60f19e49a8BB;
    if (chainId == CHAIN_ID_BSC)
      return 0x80aC94316391752A193C1c47E27D382b507c93F3;
    if (chainId == CHAIN_ID_CELO)
      return 0x306B68267Deb7c5DfCDa3619E22E9Ca39C374f84;
    if (chainId == CHAIN_ID_FANTOM)
      return 0x9563a59C15842a6f322B10f69d1dD88b41f2E97B;
    if (chainId == CHAIN_ID_GNOSIS)
      return address(0);
    if (chainId == CHAIN_ID_KARURA)
      return address(0);
    if (chainId == CHAIN_ID_KLAYTN)
      return address(0);
    if (chainId == CHAIN_ID_MOONBEAM)
      return 0x0591C25ebd0580E0d4F27A82Fc2e24E7489CB5e0;
    if (chainId == CHAIN_ID_NEON)
      return address(0);
    if (chainId == CHAIN_ID_OASIS)
      return address(0);
    if (chainId == CHAIN_ID_ROOTSTOCK)
      return address(0);
    if (chainId == CHAIN_ID_SEPOLIA)
      return 0x7B1bD7a6b4E61c2a123AC6BC2cbfC614437D0470;
    if (chainId == CHAIN_ID_ARBITRUM_SEPOLIA)
      return 0x7B1bD7a6b4E61c2a123AC6BC2cbfC614437D0470;
    if (chainId == CHAIN_ID_BASE_SEPOLIA)
      return 0x93BAD53DDfB6132b0aC8E37f6029163E63372cEE;
    if (chainId == CHAIN_ID_OPTIMISM_SEPOLIA)
      return 0x93BAD53DDfB6132b0aC8E37f6029163E63372cEE;
    if (chainId == CHAIN_ID_HOLESKY)
      return address(0);
    if (chainId == CHAIN_ID_POLYGON_SEPOLIA)
      return address(0);
    if (chainId == CHAIN_ID_MANTLE)
      return address(0);
    if (chainId == CHAIN_ID_SCROLL)
      return address(0);
    if (chainId == CHAIN_ID_BLAST)
      return address(0);
    if (chainId == CHAIN_ID_XLAYER)
      return address(0);
    if (chainId == CHAIN_ID_LINEA)
      return address(0);
    if (chainId == CHAIN_ID_BERACHAIN)
      return 0x362fca37E45fe1096b42021b543f462D49a5C8df;
    if (chainId == CHAIN_ID_SEIEVM)
      return 0x362fca37E45fe1096b42021b543f462D49a5C8df;
    if (chainId == CHAIN_ID_SNAXCHAIN)
      return address(0);
    if (chainId == CHAIN_ID_UNICHAIN)
      return 0x362fca37E45fe1096b42021b543f462D49a5C8df;
    if (chainId == CHAIN_ID_WORLDCHAIN)
      return address(0);
    if (chainId == CHAIN_ID_INK)
      return 0x362fca37E45fe1096b42021b543f462D49a5C8df;
    if (chainId == CHAIN_ID_HYPER_E_V_M)
      return address(0);
    if (chainId == CHAIN_ID_MONAD)
      return 0x362fca37E45fe1096b42021b543f462D49a5C8df;
    revert UnsupportedChainId(chainId);
  }

  function _cctpDomain(uint16 chainId) internal pure returns (uint32) {
    if (chainId == CHAIN_ID_ACALA)
      return INVALID_CCTP_DOMAIN;
    if (chainId == CHAIN_ID_AURORA)
      return INVALID_CCTP_DOMAIN;
    if (chainId == CHAIN_ID_AVALANCHE)
      return CCTP_DOMAIN_AVALANCHE;
    if (chainId == CHAIN_ID_BSC)
      return INVALID_CCTP_DOMAIN;
    if (chainId == CHAIN_ID_CELO)
      return INVALID_CCTP_DOMAIN;
    if (chainId == CHAIN_ID_FANTOM)
      return INVALID_CCTP_DOMAIN;
    if (chainId == CHAIN_ID_GNOSIS)
      return INVALID_CCTP_DOMAIN;
    if (chainId == CHAIN_ID_KARURA)
      return INVALID_CCTP_DOMAIN;
    if (chainId == CHAIN_ID_KLAYTN)
      return INVALID_CCTP_DOMAIN;
    if (chainId == CHAIN_ID_MOONBEAM)
      return INVALID_CCTP_DOMAIN;
    if (chainId == CHAIN_ID_NEON)
      return INVALID_CCTP_DOMAIN;
    if (chainId == CHAIN_ID_OASIS)
      return INVALID_CCTP_DOMAIN;
    if (chainId == CHAIN_ID_ROOTSTOCK)
      return INVALID_CCTP_DOMAIN;
    if (chainId == CHAIN_ID_SEPOLIA)
      return CCTP_DOMAIN_SEPOLIA;
    if (chainId == CHAIN_ID_ARBITRUM_SEPOLIA)
      return CCTP_DOMAIN_ARBITRUM_SEPOLIA;
    if (chainId == CHAIN_ID_BASE_SEPOLIA)
      return CCTP_DOMAIN_BASE_SEPOLIA;
    if (chainId == CHAIN_ID_OPTIMISM_SEPOLIA)
      return CCTP_DOMAIN_OPTIMISM_SEPOLIA;
    if (chainId == CHAIN_ID_HOLESKY)
      return INVALID_CCTP_DOMAIN;
    if (chainId == CHAIN_ID_POLYGON_SEPOLIA)
      return INVALID_CCTP_DOMAIN;
    if (chainId == CHAIN_ID_MANTLE)
      return INVALID_CCTP_DOMAIN;
    if (chainId == CHAIN_ID_SCROLL)
      return INVALID_CCTP_DOMAIN;
    if (chainId == CHAIN_ID_BLAST)
      return INVALID_CCTP_DOMAIN;
    if (chainId == CHAIN_ID_XLAYER)
      return INVALID_CCTP_DOMAIN;
    if (chainId == CHAIN_ID_LINEA)
      return INVALID_CCTP_DOMAIN;
    if (chainId == CHAIN_ID_BERACHAIN)
      return INVALID_CCTP_DOMAIN;
    if (chainId == CHAIN_ID_SEIEVM)
      return INVALID_CCTP_DOMAIN;
    if (chainId == CHAIN_ID_SNAXCHAIN)
      return INVALID_CCTP_DOMAIN;
    if (chainId == CHAIN_ID_UNICHAIN)
      return CCTP_DOMAIN_UNICHAIN;
    if (chainId == CHAIN_ID_WORLDCHAIN)
      return INVALID_CCTP_DOMAIN;
    if (chainId == CHAIN_ID_INK)
      return INVALID_CCTP_DOMAIN;
    if (chainId == CHAIN_ID_HYPER_E_V_M)
      return INVALID_CCTP_DOMAIN;
    if (chainId == CHAIN_ID_MONAD)
      return INVALID_CCTP_DOMAIN;
    revert UnsupportedChainId(chainId);
  }

  function _usdc(uint16 chainId) internal pure returns (address) {
    if (chainId == CHAIN_ID_ACALA)
      return address(0);
    if (chainId == CHAIN_ID_AURORA)
      return address(0);
    if (chainId == CHAIN_ID_AVALANCHE)
      return 0x5425890298aed601595a70AB815c96711a31Bc65;
    if (chainId == CHAIN_ID_BSC)
      return address(0);
    if (chainId == CHAIN_ID_CELO)
      return address(0);
    if (chainId == CHAIN_ID_FANTOM)
      return address(0);
    if (chainId == CHAIN_ID_GNOSIS)
      return address(0);
    if (chainId == CHAIN_ID_KARURA)
      return address(0);
    if (chainId == CHAIN_ID_KLAYTN)
      return address(0);
    if (chainId == CHAIN_ID_MOONBEAM)
      return address(0);
    if (chainId == CHAIN_ID_NEON)
      return address(0);
    if (chainId == CHAIN_ID_OASIS)
      return address(0);
    if (chainId == CHAIN_ID_ROOTSTOCK)
      return address(0);
    if (chainId == CHAIN_ID_SEPOLIA)
      return 0x1c7D4B196Cb0C7B01d743Fbc6116a902379C7238;
    if (chainId == CHAIN_ID_ARBITRUM_SEPOLIA)
      return 0x75faf114eafb1BDbe2F0316DF893fd58CE46AA4d;
    if (chainId == CHAIN_ID_BASE_SEPOLIA)
      return 0x036CbD53842c5426634e7929541eC2318f3dCF7e;
    if (chainId == CHAIN_ID_OPTIMISM_SEPOLIA)
      return 0x5fd84259d66Cd46123540766Be93DFE6D43130D7;
    if (chainId == CHAIN_ID_HOLESKY)
      return address(0);
    if (chainId == CHAIN_ID_POLYGON_SEPOLIA)
      return address(0);
    if (chainId == CHAIN_ID_MANTLE)
      return address(0);
    if (chainId == CHAIN_ID_SCROLL)
      return address(0);
    if (chainId == CHAIN_ID_BLAST)
      return address(0);
    if (chainId == CHAIN_ID_XLAYER)
      return address(0);
    if (chainId == CHAIN_ID_LINEA)
      return address(0);
    if (chainId == CHAIN_ID_BERACHAIN)
      return address(0);
    if (chainId == CHAIN_ID_SEIEVM)
      return address(0);
    if (chainId == CHAIN_ID_SNAXCHAIN)
      return address(0);
    if (chainId == CHAIN_ID_UNICHAIN)
      return 0x31d0220469e10c4E71834a79b1f276d740d3768F;
    if (chainId == CHAIN_ID_WORLDCHAIN)
      return address(0);
    if (chainId == CHAIN_ID_INK)
      return address(0);
    if (chainId == CHAIN_ID_HYPER_E_V_M)
      return address(0);
    if (chainId == CHAIN_ID_MONAD)
      return address(0);
    revert UnsupportedChainId(chainId);
  }

  function _cctpMessageTransmitter(uint16 chainId) internal pure returns (address) {
    if (chainId == CHAIN_ID_ACALA)
      return address(0);
    if (chainId == CHAIN_ID_AURORA)
      return address(0);
    if (chainId == CHAIN_ID_AVALANCHE)
      return 0xa9fB1b3009DCb79E2fe346c16a604B8Fa8aE0a79;
    if (chainId == CHAIN_ID_BSC)
      return address(0);
    if (chainId == CHAIN_ID_CELO)
      return address(0);
    if (chainId == CHAIN_ID_FANTOM)
      return address(0);
    if (chainId == CHAIN_ID_GNOSIS)
      return address(0);
    if (chainId == CHAIN_ID_KARURA)
      return address(0);
    if (chainId == CHAIN_ID_KLAYTN)
      return address(0);
    if (chainId == CHAIN_ID_MOONBEAM)
      return address(0);
    if (chainId == CHAIN_ID_NEON)
      return address(0);
    if (chainId == CHAIN_ID_OASIS)
      return address(0);
    if (chainId == CHAIN_ID_ROOTSTOCK)
      return address(0);
    if (chainId == CHAIN_ID_SEPOLIA)
      return 0x7865fAfC2db2093669d92c0F33AeEF291086BEFD;
    if (chainId == CHAIN_ID_ARBITRUM_SEPOLIA)
      return 0xaCF1ceeF35caAc005e15888dDb8A3515C41B4872;
    if (chainId == CHAIN_ID_BASE_SEPOLIA)
      return 0x7865fAfC2db2093669d92c0F33AeEF291086BEFD;
    if (chainId == CHAIN_ID_OPTIMISM_SEPOLIA)
      return 0x7865fAfC2db2093669d92c0F33AeEF291086BEFD;
    if (chainId == CHAIN_ID_HOLESKY)
      return address(0);
    if (chainId == CHAIN_ID_POLYGON_SEPOLIA)
      return address(0);
    if (chainId == CHAIN_ID_MANTLE)
      return address(0);
    if (chainId == CHAIN_ID_SCROLL)
      return address(0);
    if (chainId == CHAIN_ID_BLAST)
      return address(0);
    if (chainId == CHAIN_ID_XLAYER)
      return address(0);
    if (chainId == CHAIN_ID_LINEA)
      return address(0);
    if (chainId == CHAIN_ID_BERACHAIN)
      return address(0);
    if (chainId == CHAIN_ID_SEIEVM)
      return address(0);
    if (chainId == CHAIN_ID_SNAXCHAIN)
      return address(0);
    if (chainId == CHAIN_ID_UNICHAIN)
      return 0xbc498c326533d675cf571B90A2Ced265ACb7d086;
    if (chainId == CHAIN_ID_WORLDCHAIN)
      return address(0);
    if (chainId == CHAIN_ID_INK)
      return address(0);
    if (chainId == CHAIN_ID_HYPER_E_V_M)
      return address(0);
    if (chainId == CHAIN_ID_MONAD)
      return address(0);
    revert UnsupportedChainId(chainId);
  }

  function _cctpTokenMessenger(uint16 chainId) internal pure returns (address) {
    if (chainId == CHAIN_ID_ACALA)
      return address(0);
    if (chainId == CHAIN_ID_AURORA)
      return address(0);
    if (chainId == CHAIN_ID_AVALANCHE)
      return 0xeb08f243E5d3FCFF26A9E38Ae5520A669f4019d0;
    if (chainId == CHAIN_ID_BSC)
      return address(0);
    if (chainId == CHAIN_ID_CELO)
      return address(0);
    if (chainId == CHAIN_ID_FANTOM)
      return address(0);
    if (chainId == CHAIN_ID_GNOSIS)
      return address(0);
    if (chainId == CHAIN_ID_KARURA)
      return address(0);
    if (chainId == CHAIN_ID_KLAYTN)
      return address(0);
    if (chainId == CHAIN_ID_MOONBEAM)
      return address(0);
    if (chainId == CHAIN_ID_NEON)
      return address(0);
    if (chainId == CHAIN_ID_OASIS)
      return address(0);
    if (chainId == CHAIN_ID_ROOTSTOCK)
      return address(0);
    if (chainId == CHAIN_ID_SEPOLIA)
      return 0x9f3B8679c73C2Fef8b59B4f3444d4e156fb70AA5;
    if (chainId == CHAIN_ID_ARBITRUM_SEPOLIA)
      return 0x9f3B8679c73C2Fef8b59B4f3444d4e156fb70AA5;
    if (chainId == CHAIN_ID_BASE_SEPOLIA)
      return 0x9f3B8679c73C2Fef8b59B4f3444d4e156fb70AA5;
    if (chainId == CHAIN_ID_OPTIMISM_SEPOLIA)
      return 0x9f3B8679c73C2Fef8b59B4f3444d4e156fb70AA5;
    if (chainId == CHAIN_ID_HOLESKY)
      return address(0);
    if (chainId == CHAIN_ID_POLYGON_SEPOLIA)
      return address(0);
    if (chainId == CHAIN_ID_MANTLE)
      return address(0);
    if (chainId == CHAIN_ID_SCROLL)
      return address(0);
    if (chainId == CHAIN_ID_BLAST)
      return address(0);
    if (chainId == CHAIN_ID_XLAYER)
      return address(0);
    if (chainId == CHAIN_ID_LINEA)
      return address(0);
    if (chainId == CHAIN_ID_BERACHAIN)
      return address(0);
    if (chainId == CHAIN_ID_SEIEVM)
      return address(0);
    if (chainId == CHAIN_ID_SNAXCHAIN)
      return address(0);
    if (chainId == CHAIN_ID_UNICHAIN)
      return 0x8ed94B8dAd2Dc5453862ea5e316A8e71AAed9782;
    if (chainId == CHAIN_ID_WORLDCHAIN)
      return address(0);
    if (chainId == CHAIN_ID_INK)
      return address(0);
    if (chainId == CHAIN_ID_HYPER_E_V_M)
      return address(0);
    if (chainId == CHAIN_ID_MONAD)
      return address(0);
    revert UnsupportedChainId(chainId);
  }
}
